<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alex Design - Creativity Never Sleeps</title>
    <description>Alex Hu，90后，UI设计师，热爱技术&amp;设计。很高兴能在这里与你分享我对设计和生活的思考。</description>
    <link>http://localhost:4000//</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 11 Apr 2020 21:16:12 +0800</pubDate>
    <lastBuildDate>Sat, 11 Apr 2020 21:16:12 +0800</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>苹果iOS 13 设计规范解析</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;iOS 13已经发布，结合WWDC 2019的官方视频与苹果官方资料，为大家带来最全面细致的iOS 13交互设计指南及规范解析。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;一三大基本设计主题&quot;&gt;一、三大基本设计主题&lt;/h3&gt;

&lt;h5 id=&quot;清晰clarity&quot;&gt;清晰（Clarity）&lt;/h5&gt;
&lt;p&gt;纵观整个iOS系统，清晰意味着，每种尺寸下的文本都应该是易读的，所有图标都应该是精确易懂的，每一个装饰都应该是精心恰当的，而且应该本着功能驱动设计的原则。利用留白，颜色，字体，图像以及其它界面元素来共同巧妙地突出重点内容且表达其不同的可交互性。&lt;/p&gt;

&lt;h5 id=&quot;遵从deference&quot;&gt;遵从（Deference）&lt;/h5&gt;
&lt;p&gt;干净美观的界面和清晰流畅的动态效果有助于用户去理解界面内容并与之进行交互，从而避免给用户带来干扰。而如果当前的内容占据了整个屏幕时，可以利用半透明以及模糊处理等方式来暗示用户其更多内容的存在。尽可能少的使用边框，渐变以及阴影可以让界面更轻，从而突出更多的内容。&lt;/p&gt;

&lt;h5 id=&quot;深度depth&quot;&gt;深度（Depth）&lt;/h5&gt;
&lt;p&gt;鲜明的视觉层级以及生动的动态效果可以对界面有更深层次的表达，赋予了界面活力也更有助于用户去理解。易于发现且易于触发的界面元素能够提升用户的体验愉悦感，而用户在成功触发相应功能或获得更多内容的同时也掌握了当前所在位置的由始至终（可以理解为PC端的面包屑）。因此当用户在浏览内容的同时，流畅的过渡其实便体现出了一种纵深感。&lt;/p&gt;

&lt;h3 id=&quot;二黑暗模式dark-mode&quot;&gt;二、黑暗模式（Dark Mode）&lt;/h3&gt;

&lt;p&gt;尤其这次更新中深色模式非常重头，“从 iOS 13.0 开始，人们可以将系统全局的外观样式设置为深色视觉风格，即“深色模式”。&lt;/p&gt;

&lt;p&gt;在深色模式中，系统会为所有界面、视图、菜单、控件等等调用一套更深的背景色方案，同时通过更多的半透明虚化效果使前景内容更有效地从深色背景当中突显而出。深色模式同样支持所有的可访问性设计标准。&lt;/p&gt;

&lt;p&gt;人们可以将深色模式设置为系统的默认外观模式，也可以让设备在光照条件较弱的环境中自动切换至深色模式。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-6698d62663265a93.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;使用黑暗模式的原因&quot;&gt;使用黑暗模式的原因&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;查看照片等媒体内容会更加清晰，生动&lt;/li&gt;
  &lt;li&gt;在夜晚等光线较暗的模式下可以更舒适的浏览&lt;/li&gt;
  &lt;li&gt;很多用户觉得深色模式很酷&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;如何设计黑暗模式&quot;&gt;如何设计黑暗模式&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;专注并聚焦内容：深色模式可以将焦点集中于界面当中的内容区域，使内容本身得以突显，而周围的界面元素则会隐退于背景之中。更高效地给用户呈现内容。&lt;/li&gt;
  &lt;li&gt;在明亮和黑暗的外观下测试您的设计: 需要在app界面设计时充分考虑在深色与浅色两种模式下的内容依然清晰可读性。在某一种模式当中表现良好的设计方案，在另一种模式当中很可能出现问题。检视界面在两种模式下的表现，进行必要的调整，使其能够良好适配于每一种模式。&lt;/li&gt;
  &lt;li&gt;调整对比度和透明度：请确保在黑暗模式下的内容保持清晰易读。在黑暗模式下，您应该单独测试，并一并打开“增加对比度”和“降低透明度”来测试您的内容。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;三具有语义化的颜色semantic-color&quot;&gt;三、具有语义化的颜色（Semantic Color）&lt;/h3&gt;

&lt;p&gt;颜色是一种传递活力，提供视觉连续性，传达状态信息，响应用户操作提供反馈以及帮助人们可视化数据的好方法。&lt;/p&gt;

&lt;p&gt;在选择浅色和深色背景下单独和组合的应用色调颜色时，请查看系统的配色方案以获得指导。&lt;/p&gt;

&lt;h5 id=&quot;明智地使用颜色进行交流&quot;&gt;&lt;strong&gt;明智地使用颜色进行交流&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;当谨慎使用时，提高注意重要信息的颜色力量会增强。例如，当出于非关键原因在应用程序中的其他地方使用红色时，警告人们关键问题的红色三角形变得不那么有效。&lt;/p&gt;

&lt;h5 id=&quot;在整个应用中使用补色&quot;&gt;&lt;strong&gt;在整个应用中使用补色：&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;应用中的颜色应该很好地协同工作，而不是冲突或分散注意力。例如，如果粉彩对于应用程序的样式至关重要，请使用一组协调的粉彩。&lt;/p&gt;

&lt;h5 id=&quot;选择与您的应用徽标协调的有限调色板&quot;&gt;&lt;strong&gt;选择与您的应用徽标协调的有限调色板&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;微妙地使用颜色是传达品牌的好方法。&lt;/p&gt;

&lt;h5 id=&quot;考虑选择色调颜色以指示整个应用程序的交互性&quot;&gt;&lt;strong&gt;考虑选择色调颜色以指示整个应用程序的交互性&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;在Notes中，交互元素为黄色。在日历中，交互式元素为红色。如果您定义表示交互性的色调颜色，请确保其他颜色不与之竞争。提供两种版本的色调，以确保它在明暗模式下都很好看。当您使用系统颜色作为色调时，您可以自动支持高对比度。&lt;/p&gt;

&lt;h5 id=&quot;避免对交互式和非交互式元素使用相同的颜色&quot;&gt;&lt;strong&gt;避免对交互式和非交互式元素使用相同的颜色&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;如果交互式和非交互式元素具有相同的颜色，则人们很难知道在哪里挖掘。考虑艺术品和半透明度如何影响附近的颜色。艺术品的变化有时需要改变附近的颜色，以保持视觉连续性并防止界面元素变得过于强大或不足。例如，地图在使用地图模式时会显示浅色方案，但在激活卫星模式时会切换为深色方案。放置在半透明元素后面或应用于半透明元素（如工具栏）时，颜色也会显得不同。&lt;/p&gt;

&lt;h5 id=&quot;在各种照明条件下测试应用程序的配色方案&quot;&gt;&lt;strong&gt;在各种照明条件下测试应用程序的配色方案&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;根据房间的氛围，时间，天气等，室内和室外的照明都有很大差异。当您的应用在现实世界中使用时，您在计算机上看到的颜色看起来并不总是一样。始终在多种光照条件下预览您的应用，包括在晴天户外，以查看颜色的显示方式。如有必要，调整颜色以在大多数用例中提供最佳的观看体验。&lt;/p&gt;

&lt;h5 id=&quot;考虑true-tone显示如何影响颜色&quot;&gt;&lt;strong&gt;考虑True Tone显示如何影响颜色&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;True Tone显示器使用环境光传感器自动调整显示器的白点，以适应当前环境的照明条件。主要关注阅读，照片，视频和游戏的应用可以通过指定白点适应性样式来增强或削弱此效果。&lt;/p&gt;

&lt;h5 id=&quot;考虑如何在其他国家和文化中看到您对颜色的使用&quot;&gt;&lt;strong&gt;考虑如何在其他国家和文化中看到您对颜色的使用&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;例如，在某些文化中，红色表示危险。在其他人看来，红色具有积极的内涵。确保应用中的颜色发送相应的消息。&lt;/p&gt;

&lt;h5 id=&quot;避免使用让人们难以察觉应用内容的颜色&quot;&gt;&lt;strong&gt;避免使用让人们难以察觉应用内容的颜色&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;例如，色盲人可能无法区分某些颜色组合，而对比度不足会导致图标和文本与背景混合并使内容难以阅读。有关指导，请参阅颜色和对比度。&lt;/p&gt;

&lt;h5 id=&quot;使用适应当前外观的颜色&quot;&gt;&lt;strong&gt;使用适应当前外观的颜色&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;语义颜色（如分隔符）会自动适应当前外观。 当您需要自定义颜色时，将颜色集资源添加到应用程序的资产目录中，并指定颜色的浅色和深色变体，以便它可以适应当前的外观模式。 避免使用硬编码的颜色值或不适应的颜色。&lt;/p&gt;

&lt;p&gt;例如，在浅色模式下，用RGB色（255.255.255）100%的不透明度来作为背景颜色，那么在深色模式会使用RGB色（255.255.255）100%的不透明作为背景颜色。这两个颜色都会被称为背景色，打包写在代码中。系统只需按照不同的场景来使用这两种颜色即可。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-7a4493650f0297b1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;苹果设计师为我们提供了4组的语义化文字样式颜色。无论在深色或者浅色模式，都能呈现出良好的对比度。如下图所示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-9650c542691bcdc3.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;同样的，iOS 13也提供了三种默认的背景色供我们选择，包含系统背景，二级和三级背景。设计师可以在三种层级颜色中搭配来表达更好的层次效果。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-dd4d7b5b17e9beb6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在填充色，分隔线和系统色中，建议大家使用各种透明度的颜色来处理，确保在黑暗模式和白色模式下，这些颜色都能很好的适配。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-e98fa4582701aa72.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;当然，不是所有的颜色都可以用透明色，比如下面这种。此时我们可以根据情况使用不透明的纯色代替。比如下面两张图片：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-15d367c8076a2380.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-e41e6f43f052d418.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;iOS 13系统引入了六种不透明的灰色，你可以在上述半透明效果不佳的极少数情况下使用它们。 例如，交叉或重叠元素（例如网格中的线条或条形）在不透明度方面看起来更好。 通常，为UI元素使用语义定义的系统颜色。上下两图分别为默认颜色和无障碍颜色：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-1665c6636d7ab75e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;系统级别的颜色，在苹果的设计文档中也有详细的描述，如下图两图，分别为默认颜色和无障碍颜色：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-9185be9b4151c728.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-4e422795ede045b0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;确保所有外观都具有足够的色彩对比度&quot;&gt;&lt;strong&gt;确保所有外观都具有足够的色彩对比度&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;使用系统定义的颜色可确保前景和背景内容之间的对比度。 对于自定义颜色，目标是对比度为7：1，尤其是对于较小的文本。 对比度越高，深色背景下颜色就越浅，浅色模式下就会颜色越深。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-31ccbdc6e2ade3d6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-f428e5f9d563c936.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在使用设计师自己指定的颜色的时候，要确保在两种模式下的对比度都足够强，如下图点睛色指定了橙色，黑暗模式下使用白色，浅色模式下使用黑色文字，则对比度必须要拉大，确保应用的可读性足够好。&lt;/p&gt;

&lt;p&gt;在下图中，我们可以体会下黑色模式和浅色模式下，同一种颜色对于用户视觉的影响，是不一样的，要保证在两种模式下都有更好的对比度和可读性，需要设计师更严谨的配色。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-fce016b855928c03.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;柔化白色背景的颜色。 如果您必须在暗模式下使用白色背景作为内容，请选择稍暗的白色，以防止背景对周围的暗色内容太刺眼。比如可以为白色背景加一些透明度，这样舒适性更好。&lt;/p&gt;

&lt;h3 id=&quot;三基本层与浮出层base--elevated&quot;&gt;三、基本层与浮出层（Base &amp;amp; Elevated）&lt;/h3&gt;

&lt;p&gt;很多时候我们都会用到这样的设计形式，比如在背景上方叠加一层具有阴影的模块。这样页面就具有了3维的层次感。&lt;/p&gt;

&lt;p&gt;但是在深色模式下，这种具有阴影的设计就失效了。所以，在深色模式下，我们就退而求其次，直接使用比背景稍微浅一点的颜色作为浮层，而不用考虑阴影了。&lt;/p&gt;

&lt;p&gt;可以从下图这个简单的操作来理解基本层和浮出层。常规情况下，打开通讯录，那么这个界面使用了纯黑色背景，但是当我们从电话应用中打开这个联系模块时，此时它的背景色就成为了稍浅一点的颜色。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-57239c6422d9122f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;同样，在iPad的邮件应用中，侧推弹层使用了稍浅一点的颜色作为背景色。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-47babf96402557bc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;但是当使用分屏模式的时候，左右两侧的设计都使用了浮层的颜色作为背景色。因此，在不同的情况下，浮出层的用法是不一样的，这一点必须注意。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-75e6095723b429bd.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;四材质materials&quot;&gt;四、材质（Materials）&lt;/h3&gt;

&lt;p&gt;通过下图，我们可以理解，材质主要可以理解为内容区块背景叠加到基础色上所呈现的透明度。如下图所示，有四种：Thick，Regular，Thin，Ultrathin。透明度分别递增。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-277bf10808b69c4d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在黑暗模式下同理&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-893acf920b2e94b8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;每种厚度的材质，苹果设计师都为我们提供了不同的配色方案。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-dba2a2ea837b5e0d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;对于设计师来说，我们不需要完全严格遵循这些色值，只需要保证在不同厚度下的透明度能达到基本的对比度要求即可，比如右边的两个设计方案，可读性就非常差。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-7741b436a5ec4fdc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;五控制条与导航栏control--bars&quot;&gt;五、控制条与导航栏（Control &amp;amp; Bars）&lt;/h3&gt;

&lt;p&gt;对于这些基础的组件，苹果建议我们使用系统内置的设计，因为他们都使用了语义化的颜色，能更好的适配白色模式和深色模式。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-84178d7376324e19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-5adb39d46a51a110.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;六图标&quot;&gt;六、图标&lt;/h3&gt;

&lt;p&gt;一些长期保留直角的图标，在iOS 13中均改为圆角，线条也得到了加粗。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-cc3e1d802392ba37.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;众所周知，圣弗朗西斯科字体是苹果内置的英文字体，如今的圣弗朗西斯科字体内置了1500多个符号（icon）。如果各位小伙伴对图标难以把握，或者想偷个懒，可以借助于SF字体中的符号来进行设计，更加方便快捷。因为这些符号通过输入法可以直接打出来。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-81337143f4e3f794.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;设计师可以根据文字的字重，选配对应重量（粗细）的图标。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-2c51e66112574743.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;除了重量外，Apple还针对每个图标提供了三种不同的尺寸：Small、Medium、Large。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-533d28c41c7ea2a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;三种状态下文字字号相同，图标尺寸不同。官方对上述三种尺寸给出了对应的使用场景。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-8755536a1c95de8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;七更清晰的字体&quot;&gt;七、更清晰的字体&lt;/h3&gt;

&lt;h5 id=&quot;1计算器&quot;&gt;1、计算器&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;新的加粗字体的设计让重要的信息更加突出，整个iOS 13减少了细线字体的出现。&lt;/li&gt;
  &lt;li&gt;增强了字和背景的对比，让文字更容易识别，特别注重无障碍设计。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-fee53cbac5bf26f4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;2日历&quot;&gt;2、日历&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;月份和日期都用了更粗的字体，但仍然保持了清晰度。&lt;/li&gt;
  &lt;li&gt;更加突出重要的信息，从iOS 11开始日历中的“年”和“月”是最突出的。而iOS 10却只突出了日期。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-b1df1cfb1564beac.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;八更醒目的导航&quot;&gt;八、更醒目的导航&lt;/h3&gt;

&lt;h4 id=&quot;1运用大标题&quot;&gt;1、运用大标题&lt;/h4&gt;

&lt;p&gt;设置⻚面标题使⽤⼤字号; 导航栏增高。让用户随时都知道⾃己现在什么位置。但是当用户滚动页面时则缩小导航整体比例，因为此时用户更关注中间的内容。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-799a4ec7fcb04881.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;2app-store---信息层级的改变&quot;&gt;2、App store - 信息层级的改变&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;原来的整个App Store变成了现在的“App”标签栏，为了突出其他更能盈利、用户更关注的信息。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;把用户评论数以及星级去掉，因为苹果的排名本身就已经说明了App的优秀程度。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;加粗了关键信息-价钱、标题。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-5046bc3a92f00d99.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;3更清晰的图标&quot;&gt;3、更清晰的图标&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;解锁页面 - 以实心按钮取代线形按钮，这样可以增强点击感。&lt;/li&gt;
  &lt;li&gt;键盘 - 用更宽的间距、浅浅的按钮阴影来加强可点击感。&lt;/li&gt;
  &lt;li&gt;以面性图标取代线性图标（因为面性图标更像实物实体是实心的为主，图标也更显稳重。&lt;/li&gt;
  &lt;li&gt;涉及（线）的图标，加粗线条，使之看起来更像面性图标。&lt;/li&gt;
  &lt;li&gt;phone、App store、photos的信息层级被重新设计。（例如App Store的标签栏为了突出其他更能盈利、⽤户更关注的信息， 如游戏，现在就单独成为了⼀个标签页。然后将“Upates”盈利能力一般的信息入口移至右上角的个人中心）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-76edb909efea2c49.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;九弹窗视图&quot;&gt;九、弹窗视图&lt;/h3&gt;

&lt;p&gt;模态我们可以理解是一种弹层的形式，这种弹层具有强制性。它已经存在很久，对于模态场景，大家不要乱用，必须谨慎。（静电注）&lt;/p&gt;

&lt;p&gt;在iOS 13之前，模态展示的视图默认是全屏（Fullscreen）。&lt;/p&gt;

&lt;p&gt;iOS 13新增了一种操作视图：操作的视图會被縮小，同時淡化置于新跳出视图的下方。&lt;/p&gt;

&lt;p&gt;这样的弹窗视图在Human Interface Guideline（苹果设计指南）中被称为Sheet。新版的视图有助于用户明确信息的层级，便于用户找回此前被暂停的任务。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-5691f6d6831ab39c.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;新版的视图弹窗（Sheet）提供三种关闭方式：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;从屏幕顶部向下滑动&lt;/li&gt;
  &lt;li&gt;当卡片内容滚动到顶部时，从屏幕上的任何位置向下滑动 （单手操作的）&lt;/li&gt;
  &lt;li&gt;点击按钮&lt;/li&gt;
  &lt;li&gt;如果关闭弹窗时存在“修改为储存的内容”这类行为时，要提醒使用者是否要放弃编辑。&lt;/li&gt;
  &lt;li&gt;弹窗中的任务需要简单、简短，避免过于复杂，导致用户忘了此前他们所暂停的任务，进而导致用户“迷路”。以通讯录为例：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-6d4fa344e31f1da8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;对于拍照、录像、照片编修、文件编辑等这类需要沉浸式、较复杂的使用场景，就适合维持过去全屏（Fullscreen）的呈现方式。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-5be756d809840e22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;十消息通知&quot;&gt;十、消息通知&lt;/h3&gt;

&lt;p&gt;消息通知的目的是为了提升产品活跃度，激活休眠用户使用产品。&lt;/p&gt;

&lt;p&gt;出现消息通知的场景有锁屏、使用中、通知中心。其中交互类型分为“显式推送”、“隐式推送”。视觉样式分为“普通消息”、“详情样式”。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;iOS 消息通知的设计原则为“不打扰，不错过”&lt;/li&gt;
  &lt;li&gt;推送通知为了有效的提醒和保存用户注意&lt;/li&gt;
  &lt;li&gt;重叠样式则是为了减少用户消耗时间而设&lt;/li&gt;
  &lt;li&gt;提供有用的、有意义的通知（通知不是为了引导用户打开“你的应用”在推送消息时要注意通知个性化。尤其是注重场景化，运用智能算法推算出用户使用app的契机，提供合适的推送）&lt;/li&gt;
  &lt;li&gt;即使用户没有作出回应，也不要为了同一件事情发送多个通知（推荐按应用分组，也可以定制化分组）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-429def509166efea.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-e9f2497e5cf8f867.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;明确告知用户开启通知权限的价值）。最好的请求权限应在恰当的时候提出。如当用户完成新手引导后或登陆后。开通权限后app提供描述性文字和声音，以便在隐藏通知预览时显示。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-c92e3b5a25a3b48a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;考虑提供一个详情视图（包含图片、视频以及其它可动态更新的内容，允许用户可执行快速的操作）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-083b61f5c41dbc2e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;考虑提供一个详情视图（包含图片、视频以及其它可动态更新的内容，允许用户可执行快速的操作）&lt;/li&gt;
  &lt;li&gt;提供直观、有用的操作（最多包含四个操作按钮，用来执行常用任务）尽可能的提供少操作按钮，运用席克定律帮助用户作出选择，减少用户的思考避免焦虑。&lt;/li&gt;
  &lt;li&gt;避免展示破坏性的操作（确保用户有上下问，并用红色字体显示）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-8b3a875c0930c003.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-50008a75e2a6dfde.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;画出用户旅程图，找出消息推送切入点，帮助并提醒用户重要信息，避免用户在状态变更后错过重要信息，及时告知用户。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;十一haptictouch&quot;&gt;十一、HapticTouch&lt;/h3&gt;

&lt;p&gt;在iOS 13中，Apple取消了 3DTouch（又名 Force Touch），改用了HapticTouch。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-4babe01223bf278d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此前，在支持3DTouch的机型上，轻轻长按桌面图标，图标会开始晃动，会进入重新排列桌面的状态。&lt;/p&gt;

&lt;p&gt;而“重按”某个图标，就可以通过3DTouch呼出菜单。&lt;/p&gt;

&lt;p&gt;在改用HapticTouch之后，原本的3DTouch也随之取消，系统不再区分轻按和重按。只能通过长按呼出菜单，“重新排列桌面”也变成了菜单中的一个选项。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-4c91d89795dedb29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-aff281476d9ad56a.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;十二情境菜单contextual-menu&quot;&gt;十二、情境菜单（Contextual Menu）&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-f66cfc84aac4fc6d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;情景菜单类似于Peek（预览）和Pop（弹出），但有两个主要区别：情境菜单可在运行iOS 13及更高版本的所有设备上使用；Peek和Pop仅适用于支持3D Touch的设备。 情境菜单立即显示上下文相关的命令；Peek和Pop需要向上滑动才能查看命令。 （请注意：iOS 13中 3D touch的交互方式与此情境菜单的交互逻辑不太一样，情境菜单的交互方式是长按，而不是重压。&lt;/p&gt;

&lt;p&gt;对于情境菜单的交互设计，请遵循以下建议：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;始终采用情境菜单： 如果您为某些地方的项目提供情境菜单而不是其它地方的项目，人们将不知道他们可以在哪里使用该功能，并且可能认为您的应用程序存在问题。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;仅包括适用于该项目的最常用命令：例如，在邮件消息的上下文菜单中，包含用于回复和移动邮件的命令是有意义的，但包含格式或邮箱命令没有意义。 列出太多命令可能会让人无所适从。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用子菜单来管理复杂性：子菜单是一个情境菜单项，显示逻辑相关命令的二级菜单。 为子菜单提供描述其内容的直观标题，以便人们可以预测子菜单的命令而不会泄露它们。 简洁，以行动为导向的标题还允许人们跳过他们在当前环境中不需要的子菜单。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;将子菜单保持在一个级别：虽然子菜单可以缩短情境菜单并阐明人们可以执行的命令，但是多个子菜单级别使得体验变得复杂并且人们难以导航。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;将最常用的项目放在菜单的顶部：当人们打开情境菜单时，他们的焦点位于该菜单的顶部区域。 将最常见的项目放在菜单顶部可以帮助人们找到他们正在寻找的项目。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;使用分隔符对相关菜单项进行分组：创建可视分组可以帮助人们更快地扫描菜单。 例如，您可以使用分隔符对与编辑项目相关的操作进行分组，使用另一个分隔符对与共享项目相关的操作进行分组。 通常，不建议情境菜单中有三个以上的组。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;避免为同一项目提供情境菜单和编辑菜单： 当人们为同一个项目启用这两个功能时，系统很难检测到意图，这可能会让人感到困惑。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;避免提供打开项目预览的操作按钮： 人们可以点击打开他们正在预览的项目，因此通常不需要提供明确的“打开”按钮。&lt;/p&gt;

&lt;h3 id=&quot;十三默认头像&quot;&gt;十三、默认头像&lt;/h3&gt;

&lt;p&gt;在iOS 12系统中，“默认头像”都具有性别特征。比如通讯录的图标，就是由一男一女的剪影所组成。&lt;/p&gt;

&lt;p&gt;在其他位置，比如：通讯录详情页、短信列表、AppStore所用的默认头像均为“男性”剪影。&lt;/p&gt;

&lt;p&gt;而在iOS 13中，上述这些位置的头像，都变成了去性别特征的圆形头像。如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-e47d4d6bf5491284.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-f4d706cb1a81b3e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Apple没有根据账号性别显示男/女头像，而是采用“无性别头像”。我想这么做也许是为了更好的照顾到“跨性别群体”的感受。&lt;/p&gt;

&lt;p&gt;此前跨性别群体曾要求Apple在Emoji表情中增加“特殊人群”、“特殊家庭”和“彩虹旗”等标志，这些眼下已出现在iOS 12.2的Emoji中。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-0976bd5b8f62f120.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;十四开关switches&quot;&gt;十四、开关（Switches）&lt;/h3&gt;

&lt;p&gt;自iOS 7发布以来，iOS的切换开关一直没有变化。其特点是，开关的投影延展到了“凹槽”外、且底色会有缩放动效。&lt;/p&gt;

&lt;p&gt;时隔五年，苹果对切换开关的细节做了调整。在最新的OS 13中，开关的投影缩到了“凹槽”内，并且取消了底色缩放的过渡，改用“渐隐渐显”的过渡方式。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-b9ca66449af312ee.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;十五分段控件&quot;&gt;十五、分段控件&lt;/h3&gt;

&lt;p&gt;新版的分段控件由过去的描边线，改为填充的形式。其中，选中状态的滑块含投影，投影效果和切换开关一样，投影只在“凹槽”内。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-24c1cc425af4127b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;十六音量调整视图&quot;&gt;十六、音量调整视图&lt;/h3&gt;

&lt;p&gt;在iOS12版本中，音量的调节图标是在屏幕中间显示一个巨大的铃铛，铃铛下面会有音量大小的进度条，严重干扰用户视线。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-faa3a8ad1c651d95.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;iOS13的音量控制图标也进行了全新的设计，音量大小的图标被设计在了屏幕左侧。在音量调节过程中，喇叭图标也非常直观的显示了音量大小的变化。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-1ca622f81b8eed6e.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;另外，左侧的音量可以支持滑动调整，类似底部控制器弹窗的音量调节。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-7cabd41a5a61dfac.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;十七三指菜单&quot;&gt;十七、三指菜单&lt;/h3&gt;
&lt;p&gt;在iOS 13中，只要用3个手指点击屏幕，就可以呼出一个全新的菜单。用来完成：撤销、剪切、复制、粘贴、重做这五个操作。&lt;/p&gt;

&lt;p&gt;值得一提的是，Edit Menu依然存在，可以和三指菜单同时出现。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/17279224-ce85a609bf72d8e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;本文部分内容参考文档&quot;&gt;本文部分内容参考文档&lt;/h4&gt;

&lt;p&gt;https://developer.apple.com/videos/play/wwdc2019/808/&lt;/p&gt;

&lt;p&gt;https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/dark-mode/&lt;/p&gt;

&lt;p&gt;https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/modality/&lt;/p&gt;

&lt;p&gt;https://developer.apple.com/design/human-interface-guidelines/sf-symbols/overview/&lt;/p&gt;

</description>
        <pubDate>Wed, 01 Apr 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/04/01/%E8%8B%B9%E6%9E%9CiOS-13-%E6%96%B0%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90.html</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/01/%E8%8B%B9%E6%9E%9CiOS-13-%E6%96%B0%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90.html</guid>
        
        <category>移动端</category>
        
        <category>设计规范</category>
        
        
        <category>移动端</category>
        
      </item>
    
      <item>
        <title>安卓和iOS的区别</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;iOS 13已经发布，结合WWDC 2019的官方视频与苹果官方资料，为大家带来最全面细致的iOS 13交互设计指南及规范解析。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;一封闭与开放&quot;&gt;一、封闭与开放&lt;/h3&gt;

&lt;h4 id=&quot;1两个系统对屏幕反应的优先级不同&quot;&gt;1.两个系统对屏幕反应的优先级不同&lt;/h4&gt;

&lt;p&gt;iOS对屏幕反应的优先级是最高的，它的响应顺序依次为Touch–Media–Service–Core架构，换句话说当用户只要触摸接触了屏幕之后，系统就会最优先去处理屏幕显示也就是Touch这个层级，然后才是媒体（Media），服务（Service）以及Core架构。&lt;/p&gt;

&lt;p&gt;而Android系统的优先级响应层级则是Application–Framework–Library–Kernal架构，和显示相关的图形图像处理这一部分属于Library，你可以看到到第三位才是它，当你触摸屏幕之后Android系统首先会激活应用，框架然后才是屏幕最后是核心架构。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/01a3245a25db48a80120ba3872a7d3.jpg@800w_1l_2o_100sh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2硬件工作配置不同&quot;&gt;2.硬件工作配置不同&lt;/h4&gt;
&lt;p&gt;iOS基于GPU加速Android系统产品则并非如此，因为Android需要适应不同的手机硬件，需要满足各种差异配置，所以很多图形特效大多都要靠程序本身进行加速和渲染，并严重依赖CPU运算的操作自然会加大处理器的负荷，从而出现卡顿的问题&lt;/p&gt;

&lt;h4 id=&quot;3开发机制不同&quot;&gt;3.开发机制不同：&lt;/h4&gt;
&lt;p&gt;安卓机制效率低，Android的编程语言是JAVA，而iOS的则为Objective-C。Objective-C的优势是效率高但比较“唯一”，而JAVA的优势则是跨平台不过运行效率相对偏低，其实这两个编程语言所带来的机制不同，就已经造成了各自系统之间的流畅性差异化。&lt;/p&gt;

&lt;p&gt;我们可以用一个简单易懂的案例来解释封闭与开放。例如消息提醒机制的差异。&lt;/p&gt;

&lt;p&gt;iOS系统对权限控制比较严，每当我们下载一个新的app，当要调用相册权限、相机、麦克风、位置等都需要用户选择确定，如果用户点击不允许，就没法调取。想要再次允许的时候操作也比较麻烦，需要到系统设置里面去打开权限。这也就是为什么iOS消息设置相对来说复杂一点，根本原因是iOS系统。&lt;/p&gt;

&lt;p&gt;由于Android开源，Android开发在用户安装app就获取了很多权限，比如用户安装app后，对于消息提醒的设置只需要在app设置界面设置就可以了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/016dc15a25db84a801216e8d120df1.jpg@800w_1l_2o_100sh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;二物理交互区别&quot;&gt;二、物理交互区别&lt;/h3&gt;
&lt;p&gt;Android和iOS除了封闭和开放的差别外，还有物理控制、交互的差别。iOS全是由苹果公司统一出品，而安卓则不同。在国内，经济快速发展，安卓手机厂商如雨后春笋拔地而起，很多从原来的山寨机一步步打造自己的品牌，逐渐得到用户的认可。我们常见的Android手机有三星、谷歌、小米、华为、中兴、魅族、oppo、美图手机、锤子手机、努比亚……面对着这么多手机厂商，每个厂商有着自己独特的功能和交互方式，甚至有的物理键都不相同。&lt;/p&gt;

&lt;h4 id=&quot;截屏&quot;&gt;截屏&lt;/h4&gt;
&lt;p&gt;就拿一个很常见的截屏功能来说，iOS是电源开关键和home键同时按，而小米手机截屏则是按住音量键和最左边的功能键截屏（其实小米有五种截屏方法，如下图），谷歌手机又不同了，华为也不一样了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/0178e05a25dbb9a801216e8d8bcc8b.jpg@800w_1l_2o_100sh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;解锁&quot;&gt;解锁&lt;/h4&gt;

&lt;p&gt;比如说一个常见的功能，指纹解锁，苹果5、6、7的指纹解锁就是在home键上，而iPhone x则采用面部识别解锁。从用户的操作习惯来说，会用大拇指来解锁，不管左手还是右手。而华为手机的指纹解锁放在手机的背面，用户大多数则会选择食指来解锁。再举一个栗子，密码解锁除了指纹外，还有输入密码解锁，iOS从原来的四位到现在的6位，都是采用键盘输入密码的方式进行解锁；而安卓手机解锁大部分是采用的手势密码的方式进行解锁。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/01e7255a25dbdfa80120ba38e170d4.jpg@800w_1l_2o_100sh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;拍照&quot;&gt;拍照&lt;/h4&gt;
&lt;p&gt;再比如美图手机、oppo r11这些手机都是主打拍照功能，拍照很牛逼，吸引着用户，当然，拍照是现在很多手机主推功能，包括苹果手机也一直在拍照功能上改进。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/01ace45a25dc0ea80120ba384f746c.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;三设计的差异&quot;&gt;三、设计的差异&lt;/h3&gt;

&lt;h4 id=&quot;1设计输入与输出&quot;&gt;1.设计输入与输出&lt;/h4&gt;

&lt;h5 id=&quot;a尺寸大小&quot;&gt;a.尺寸大小&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/017df65a25dc87a80120ba38667b71.jpg@800w_1l_2o_100sh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果每种手机尺寸都去做设计，一个设计师你会做死，设计师多了公司又请不起。&lt;/p&gt;

&lt;p&gt;通常设计师们是这样做的：Android就以720px＊1280px 或者1080px＊1920px（根据具体情况定，但大部分是以720px＊1280px做的），iOS则以750px＊1334px。&lt;/p&gt;

&lt;p&gt;我们看公司业务情况，重Android还是重iOS，重谁就以谁为基础做设计，只做一套，让开发适配，具体控件调用相应平台原生控件。如果两种都重视，那我们就以iOS的&lt;strong&gt;750px＊1334px&lt;/strong&gt;作为设计基础。&lt;/p&gt;

&lt;p&gt;Android的安全点击范围为48dp，iOS的则为44pt。Android的状态栏为24dp，iOS的为20pt。安卓的顶部导航栏为56dp，iOS的为44pt。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/01acbe5a25dcbfa801216e8d7610c2.jpg@800w_1l_2o_100sh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;b单位&quot;&gt;b.单位&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;px是我们常用的像素单位。比如我们常说的苹果6的设计尺寸为750px＊1334px。&lt;/li&gt;
  &lt;li&gt;pt是在iOS中表示长度单位和字体单位。对于iOS开发来说，我们应该给他们pt的单位，我们现在设计的尺寸基本是以苹果6的尺寸设计的（用pt单位表示就是375pt＊667pt，用像素单位表示就是750px＊1334px，在2倍图中1pt＝2px）。&lt;/li&gt;
  &lt;li&gt;dp是安卓开发中使用的设计单位，就拿我们常用的720px＊1280px来说，与之对应的安卓单位表示为360dp＊640dp，它们也是2倍的关系。&lt;/li&gt;
  &lt;li&gt;sp是安卓的字体单位，假如字体在你的设计稿720px＊1280px中为32px，那么在360dp＊640dp中该字体的大小就为16sp。&lt;/li&gt;
  &lt;li&gt;XHDPI是对应安卓的2倍图（720px＊1280px)，XXHDPI是对应安卓的3倍图（1080px＊1920px）这两个是我们现在常用的。
&lt;img src=&quot;https://img.zcool.cn/community/0196315a25dcefa801216e8df10fd9.jpg@800w_1l_2o_100sh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;iOS我们通常设计尺寸是750px＊1334px，它对应的是iOS的@2x图。
&lt;img src=&quot;https://img.zcool.cn/community/01befa5a25dd08a80120ba385916e3.jpg@800w_1l_2o_100sh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;c字体&quot;&gt;c.字体&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;在Android中，英文字体使用Roboto，中文字体使用Noto（思源黑体）。Google联合Adobe发布的「思源黑体」作为Android的默认中文字体，不仅仅在字形上更易于在屏幕的阅读，并且拥有7个字重，充分满足了设计的需求。
&lt;img src=&quot;https://img.zcool.cn/community/0188785a25dd84a80120ba3868d218.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;iOS 中，在英文方面，苹果加入了新的字体San Francisco，该字族包含了有两个字体：为 iOS 和 OS X 设计的 SF，以及为 Watch OS 设计的 SF Compact ，而各自分为各自分为Text 和 Display，前者 6 个字重，后者 9 个（多了三个斜体）。OS全新的「苹方」，字形更加优美，且在屏幕的显示也更加清晰易读，拥有6个字重，满足了日常的设计和阅读需求。
&lt;img src=&quot;https://img.zcool.cn/community/01e1635a25ddb4a80120ba387c1753.jpg&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;在我们移交设计稿时，我们要向开发说明，安卓、iOS开发，用系统自带的字体，那么安卓就会用安卓系统的字体，iOS则会用iOS系统的字体。除非设计特殊要求用其他字体，那就要和开发工程师商量了，在安装包植入字体包，这样才能让用户使用的字体都相同。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;d距离大小字体大小的区别&quot;&gt;d.距离大小、字体大小的区别&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;在iOS中，内容到边的距离通常是15pt（以750px＊1334px为基础，像素大小为30px）。&lt;/li&gt;
  &lt;li&gt;而安卓基本是16dp（以720px＊1280px为基础，像素大小为32px）。&lt;/li&gt;
  &lt;li&gt;字体大小也不一样，iOS是11pt、13pt、15pt、17pt，而安卓中是12sp、14sp、16sp、18sp。&lt;/li&gt;
  &lt;li&gt;用一种设计尺寸，那么我们通常采用偶数，这样方便两边适配，就是间距以8px为基础我们边距可以定位32px。字体大小也采用12sp、14sp、16sp、18sp。
&lt;img src=&quot;https://img.zcool.cn/community/0159a15a25ddf9a801216e8d609978.jpg@800w_1l_2o_100sh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;e设计输出&quot;&gt;e.设计输出&lt;/h4&gt;
&lt;h5 id=&quot;标注&quot;&gt;标注&lt;/h5&gt;
&lt;p&gt;sketch Measure，它可以轻松导出我们的尺寸标注，导出的时候我们可以选择默认展示的单位。如果是给安卓开发导出尺寸，你的画板是360dp＊640dp，那我们选择导出的单位就为MDPI，这样开发就直接读取值就行，不用换算了。如果给iOS导出尺寸，画板是375pt＊667pt，那就选择导出的单位为@1x。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/01cfab5a25de24a801216e8d09f90b.jpg@800w_1l_2o_100sh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;windows标注神器：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Markman（http://www.getmarkman.com），&lt;/li&gt;
  &lt;li&gt;Pxcook像素大厨（http://www.fancynode.com.cn），&lt;/li&gt;
  &lt;li&gt;Assister ps（ http://witstudio.net/en/assistor/ ）&lt;/li&gt;
  &lt;li&gt;Markly（http://marklyapp.com/）&lt;/li&gt;
  &lt;li&gt;INK（http://ink.chrometaphore.com/）&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;切图&quot;&gt;切图&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;通常我们切图格式为png，当然，现在h5页面、网页开发基本都是采用svg格式（矢量）。&lt;/li&gt;
  &lt;li&gt;在sketch中，我们可以新建一个面板，专门放切图文件。&lt;/li&gt;
  &lt;li&gt;ps也有切图插件cutterman，一键切图，非常智能高效。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;切图我们需要注意的是：&lt;/strong&gt;
&lt;strong&gt;统一规格：&lt;/strong&gt;通常，我们都有一套自己的图标设计规范，在这个规范内进行我们的图标设计，设计完后再用到相应的位置。比如，安卓常见的图标制作大小为24dp，安卓切图通常就为24dp 
&lt;img src=&quot;https://img.zcool.cn/community/0137f55a25de79a80120ba38ed3581.jpg@800w_1l_2o_100sh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意点击范围：&lt;/strong&gt;安卓的安全点击范围为48dp，比如我们顶部的导航返回键，点击范围就应该设置为48dp。虽然通常设计切图可以不切这么大，但是应该在移交的时候注明点击范围。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;统一命名：&lt;/strong&gt;命名规范，其实也就像我们使用ps的时候图层命名一样，它的主要作用是让我们能够快速找到想要的切图和区分其他切图，是一个习惯的问题。切图命名统一英文，不要用中文，程序不识别的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;安卓点九切图：&lt;/strong&gt;这个是安卓切图比较特别的地方，点九切图可以更好的适配手机和减少系统占用资源，当然并不是所有安卓切图都用点九，只是在特殊情况下才使用的，比如按钮、背景等。使用点九，你可以用ps切，也可以下载一个点九图的生成器。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/01839a5a25deada801216e8d2acee8.jpg@800w_1l_2o_100sh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;切图的输出：&lt;/strong&gt;虽然前面我们讲了只做一套设计稿，但是我们切图的时候最好分别输出，因为安卓和iOS的命名是不一样的。iOS切图是全部放在一个文件夹的，以后缀名不同来区分@2x和@3x。而安卓是把2倍图和3倍图分开放在不同的文件夹里，名字都是一样的，2倍图放在xhdpi的文件夹中，3倍图放在xxhdpi中。
&lt;img src=&quot;https://img.zcool.cn/community/010bc25a25ded2a80120ba38ee6ba8.jpg@800w_1l_2o_100sh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;交互与视觉输出：&lt;/strong&gt;交互设计师需要把页面跳转流程、交互事件在交互文档中说明。视觉设计师最后输出切图、标注、图片，最后统一移交给开发。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/01fc005a25df13a801216e8d20e2db.jpg@800w_1l_2o_100sh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/012de85a25df3ba80120ba384ac97a.jpg@800w_1l_2o_100sh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2控件差别&quot;&gt;2.控件差别&lt;/h4&gt;

&lt;h5 id=&quot;导航&quot;&gt;导航&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;导航栏的高度是不相同的，iOS系统规范为44pt，安卓的为56dp。&lt;/li&gt;
  &lt;li&gt;其次iOS导航栏的标题在中间，返回键旁边可以有返回字样或者上一层级的名称；而安卓导航栏的标题通常是和返回键挨着的，还有就是两者的箭头样式不同。&lt;/li&gt;
  &lt;li&gt;如果只做一套，那就把标题统一放在中间，返回键旁边也不需要放指示文字。
&lt;img src=&quot;https://img.zcool.cn/community/0139bf5a25df7da80120ba38ad7431.jpg@800w_1l_2o_100sh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;弹窗&quot;&gt;弹窗&lt;/h5&gt;

&lt;h6 id=&quot;dialogalerts&quot;&gt;Dialog／Alerts&lt;/h6&gt;
&lt;p&gt;首先它们在两个平台的名称不一样，安卓称之为dialog，iOS中称之为alert。使用场景就是：需要用户对此弹框进行操作后才能继续执行其他任务。使用Dialog／Alerts的时候还是谨慎一点比较好，尽量不要给用户带来糟糕的体验感。
&lt;img src=&quot;https://img.zcool.cn/community/0164df5a25dfb0a80120ba38d27d42.jpg@800w_1l_2o_100sh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;toasthud&quot;&gt;Toast／HUD&lt;/h6&gt;
&lt;p&gt;toast是安卓中的习惯叫法，HUD是iOS中的习惯叫法。&lt;/p&gt;

&lt;p&gt;安卓中是这样规范toast的：
1.出现在屏幕底部。2.只能放文字不能带图标，文字要精简不宜太长。3.不是模态的，可以透过Toast对其他控件进行操作。4.短时间后会自动消失。5.不能对Toast进行交互，不能手动操作让Toast主动消失。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;它们两的不同主要是：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Toasts一般出现在屏幕下方，HUD出现在屏幕中间。&lt;/li&gt;
  &lt;li&gt;Toasts一般是灰黑或黑色半透明，HUD一般是毛玻璃半透明。&lt;/li&gt;
  &lt;li&gt;每次产生的Toasts内容不可改变，HUD内容可以改变（比如调节音量时出现的HUD）
*但其实现在toast使用也已泛化，每个平台都在用，而且也延伸出其他样式，出现的位置也不一定在中间或者底部，也有可能出现在顶部。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;actionbaraction-sheetsacitivity-views&quot;&gt;Actionbar（Action Sheets、Acitivity Views）&lt;/h5&gt;
&lt;p&gt;动作栏虽然两个系统都有，但是官方给的指导建议还是有些不同的。&lt;/p&gt;

&lt;p&gt;安卓中称为Bottom Sheets，特别适合有三个或者三个以上的操作需要提供给用户选择、并且不需要对操作有额外解释的情景。如果只有两个或者更少的操作，或者需要详加描述的，可以考虑使用菜单(Menu)或者对话框替代。&lt;/p&gt;

&lt;p&gt;底部动作条(Bottom Sheets)可以是列表样式的也可以是宫格样式的，没有取消按钮。宫格布局可以增加视觉的清晰度。在一个标准的列表样式的底部动作条(Bottom Sheets)中，每一个操作应该有一句描述和一个左对齐的 icon。如果需要的话，也可以使用分隔符对这些操作进行逻辑分组，也可以为分组添加标题或者副标题。&lt;/p&gt;

&lt;p&gt;而iOS中，也有和安卓类似的功能，但是action sheets是没有图标的，居中对齐，在action sheets（操作列表）和activity views（活动视图）通常还带有一个取消按钮，通常点击取消或者弹窗外的界面，弹窗都会消失。&lt;/p&gt;

&lt;p&gt;其实，安卓中也有不带文字的操作列表，不过通常是在屏幕中间弹出。样式我们现在基本也趋于统一，不去纠结每个平台的特殊性了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/016c535a25e00ea80120ba38b682c1.jpg@800w_1l_2o_100sh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;tips和popover&quot;&gt;tips和popover&lt;/h6&gt;
&lt;p&gt;这两种用法在每个平台都有用到，我们在正确的场景中使用它们就好了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/01f3225a25e042a80120ba38dac389.jpg@800w_1l_2o_100sh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;snackbar&quot;&gt;Snackbar&lt;/h6&gt;
&lt;p&gt;安卓独有的（见上图）。它是一种针对操作的轻量级反馈机制，常以一个小的弹出框的形式，出现在手机屏幕下方或者桌面左下方。它们出现在屏幕所有层的最上方，包括浮动操作按钮。&lt;/p&gt;

&lt;p&gt;它们会在超时或者用户在屏幕其他地方触摸之后自动消失。Snackbar 可以在屏幕上滑动关闭。当它们出现时，不会阻碍用户在屏幕上的输入，并且也不支持输入。屏幕上同时最多只能现实一个 Snackbar。&lt;/p&gt;

&lt;h4 id=&quot;动画&quot;&gt;动画&lt;/h4&gt;

&lt;p&gt;Material Design运用的是机械物理和电磁物理，而iOS的动效更多建立在镜头运动和景深变化上。究其设计语言的本质就是让用户可以把客观经验移植到界面的一种思路。&lt;/p&gt;

&lt;p&gt;Material Design动画最引人注目的就是响应式交互动画，更加模拟真实物理场景，点击后就会泛起“涟漪”作为一个交互响应。而其他物体的排列则按照一种“深浅”的层级来排布，离手指越近的元素越亮，阴影越深，而离开远的元素则越暗，直至淹没在黑暗之中。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/018a3f5a25e073a80120ba3872acef.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;iOS的系统动效可以发现，每当用户去点击，镜头就会切近，而背景则是隐入了一片高斯模糊的景深之中。高斯模糊也成为了iOS特有的一个表达层级关系的利器（其中不仅是模糊，还存在着镜头晃动时的位移）。同样类型的动效还体现在打开app的时候由一个点放大成一个面，包括“日历”App和“相册”App（皆为系统应用）中年-日-月切换的操作，均是镜头思路的表现形式。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/01d67b5a25e09fa80120ba3825bdf3.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;按钮&quot;&gt;按钮&lt;/h5&gt;
&lt;p&gt;安卓主要使用的按钮是：扁平按钮、凸起按钮、悬浮按钮、底部常驻按钮、下拉菜单按钮、开关按钮。&lt;/p&gt;

&lt;p&gt;iOS和安卓的按钮形式都很接近，系统主要采用文字按钮和图标按钮。&lt;/p&gt;

&lt;p&gt;两者最大的差异是安卓点击有响应效果。比如：悬浮响应按钮(Floating action button)， 点击后会产生墨水扩散效果的圆形按钮。浮动按钮(Raised button)， 常见的方形纸片按钮，点击后会产生墨水扩散效果。扁平按钮(Flat button)， 点击后产生墨水扩散效果，和浮动按钮的区别是没有浮起的效果。而iOS没有墨水扩散效果，而是颜色变浅来反馈用户点击事件。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/01e3535a25e0d6a80120ba38a4a89f.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/01d4bd5a25e0f5a801216e8d827175.jpg@800w_1l_2o_100sh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;键盘&quot;&gt;键盘&lt;/h5&gt;
&lt;p&gt;安卓和iOS的键盘是不相同的，根据不同场景呼出不同的键盘类型，具体使用场景大家可以自己去深入了解下。如下图。通常对于对话框来说，iOS的发送按钮是可以直接放在键盘上的，而安卓的通常是放在对话框里面。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/01a9905a25e13ba80120ba380187ab.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;选择控件和日期选择等&quot;&gt;选择控件和日期选择等&lt;/h5&gt;
&lt;p&gt;常见的选择控件样式是不相同的，iOS像滚轮，模糊弱化未选择的选项，安卓就是平移滑动。开关控件样式也是不相同的。通常这些对于做原生应用的来说，各自调用各自的系统组件就行，但是对于h5来说，他们是采用统一的设计，安卓和iOS是相同的，应该让开发制作统一样式，需要更少的系统区分。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/014cdb5a25e16ea801216e8dacf9e4.jpg@800w_1l_2o_100sh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ios11&quot;&gt;iOS11&lt;/h3&gt;

&lt;h4 id=&quot;设计语汇&quot;&gt;设计语汇&lt;/h4&gt;
&lt;h5 id=&quot;1字体加重&quot;&gt;1.字体加重&lt;/h5&gt;
&lt;p&gt;字体的变化在这个版本来说是非常大的，字重发生变化，比如主界面，App 名称的字变粗，日历字体变粗改进阅读体验。
&lt;img src=&quot;https://img.zcool.cn/community/0117755a25e1aaa80120ba38d580db.jpg@800w_1l_2o_100sh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;2字体变大&quot;&gt;2.字体变大&lt;/h5&gt;
&lt;p&gt;全新的 Navigation Bar，我们可能早就已经见过过这种样式了，去年(2016)在新版 Apple Music 就应用了这种大大字 Nav Bar，可谓是iOS的一次尝试，随后在今年就全部应用在iOS11系统中了。当然设计师也不要担心开发的实现难度，iOS11也开放 API 让大家使用了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/01496d5a25e1d8a801216e8ded6a6e.jpg@800w_1l_2o_100sh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;3卡片阴影圆角的应用&quot;&gt;3.卡片、阴影、圆角的应用&lt;/h5&gt;
&lt;p&gt;卡片的应用，大家可以去观察App Store，这次它的改变也非常大，整体交互架构都发生了变化，视觉表现也让人耳目一新，当然它的改变不是为了更好看，而是为了达到苹果公司的商业目的。App Store也充分展现了卡片、阴影、圆角的应用方式。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/018d525a25e1f2a80120ba38950876.jpg@800w_1l_2o_100sh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;4icon从空心到实心&quot;&gt;4.icon从空心到实心&lt;/h5&gt;
&lt;p&gt;据研究表明，实心的图标比空心更容易识别。当然，这里的改变主要的原因我认为是卡片和阴影的应用，实心图标能更好的和它们结合在一起。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/01c1bd5a25e219a801216e8d52a191.jpg@800w_1l_2o_100sh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;5键盘样式改变&quot;&gt;5.键盘样式改变&lt;/h5&gt;
&lt;p&gt;数字虚拟键盘也从原来的空心变成实心了，它和拨号、计算器统一为实心按钮。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/01ad205a25e237a80120ba38bc7eff.jpg@800w_1l_2o_100sh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;系统本身交互和应用的变化&quot;&gt;系统本身交互和应用的变化&lt;/h4&gt;
&lt;h5 id=&quot;1解锁交互发生变化&quot;&gt;1.解锁交互发生变化&lt;/h5&gt;
&lt;p&gt;iPhone x解锁采用面部解锁，取代了原来的指纹解锁，实体home键已经被虚拟条取代。 
&lt;img src=&quot;https://img.zcool.cn/community/0189375a25e25da801216e8d268d85.jpg@800w_1l_2o_100sh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;2控制中心的变化&quot;&gt;2.控制中心的变化&lt;/h5&gt;
&lt;p&gt;控制中心从原来的2个页面变为现在的一个页面了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/016ae55a25e276a80120ba38f6b158.jpg@800w_1l_2o_100sh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;3计算器拨号样式的变化&quot;&gt;3.计算器、拨号样式的变化&lt;/h5&gt;
&lt;p&gt;计算器和拨号样式也和数字键盘一样，从空心按钮便为实心按钮。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/011edb5a25e292a801216e8d1d2b98.jpg@800w_1l_2o_100sh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;五iphone-x&quot;&gt;五、iPhone x&lt;/h3&gt;

&lt;h4 id=&quot;尺寸&quot;&gt;尺寸&lt;/h4&gt;
&lt;p&gt;原来的屏幕在 iPhone X 之前，尽管 iPhone SE，7 和 7 Plus 的屏幕尺寸大小不同，但都是 16:9 的屏幕。而 iPhone X 差不多是个 13:6 的屏幕812pt x 375 pt（2436px x 1125px）。屏幕的绝对尺寸也变大了，从 4.7 吋增大到 5.8 吋。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/019bed5a25e384a80120ba38cce990.jpg@800w_1l_2o_100sh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/019b865a25e3ada801216e8d2c37fb.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;就尺寸大小来说，我们就可以简单的认为，iPhone X的竖屏模式，宽度与iPhone6、iPhone7、iPhone8的4.7寸显示屏宽度相同；iPhone X的高度比4.7寸的屏幕要高出145pt，增加大约20%的垂直显示空间。应用程序可以显示高分辨率的图像。iPhone X是显示高分辨率的@3x图片。375x812@1x，3倍尺寸就为1125x2436@3x，所以我们设计稿就以375pt x 812pt做，最后导出3倍图就可以。&lt;/p&gt;

&lt;h4 id=&quot;安全区&quot;&gt;安全区&lt;/h4&gt;
&lt;p&gt;为了在iPhone x上适配我们的设计，我们就不得不考虑这个问题。相对于其他来说，iPhone x 的状态栏变高了，垂直空间更大，展示的内容更多。还有home键采用虚拟条，交互也发生了一些变化。我们通过下面的图来了解它。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.zcool.cn/community/017ea05a25e434a801216e8d3a3ca8.jpg@800w_1l_2o_100sh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 01 Apr 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/04/01/%E5%AE%89%E5%8D%93%E5%92%8CiOS%E7%9A%84%E5%8C%BA%E5%88%AB.html</link>
        <guid isPermaLink="true">http://localhost:4000/2020/04/01/%E5%AE%89%E5%8D%93%E5%92%8CiOS%E7%9A%84%E5%8C%BA%E5%88%AB.html</guid>
        
        <category>移动端</category>
        
        <category>设计规范</category>
        
        
        <category>移动端</category>
        
      </item>
    
  </channel>
</rss>
